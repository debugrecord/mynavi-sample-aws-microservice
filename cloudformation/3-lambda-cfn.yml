AWSTemplateFormatVersion: '2010-09-09'

Description: Lambda for chaning cognito user status function template with YAML - Depends On 1-vpc-cfn.yml, 2-s3-for-lambda-deploy-cfn.yml.

Parameters:
  VPCName:
    Description: Target VPC Stack Name
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Default: mynavi-sample-microservice-vpc

Resources:
  LambdaForChangeCognitoUserStatusFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue: !Sub ${VPCName}-Lambda-S3Bucket
        S3Key: cognito-init-lambda-0.0.1-SNAPSHOT-aws.jar
      Handler: org.debugroom.mynavi.sample.aws.microservice.lambda.app.handler.CloudFormationTriggerHandler::handleRequest
      FunctionName: mynavi-microservice-cfn-cognito-user-status-change-function
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: changeCognitoUserStatusFunction
      MemorySize: 1024
      Runtime: java11
      Timeout: 120
#      VpcConfig:
#        SecurityGroupIds:
#          - Fn::ImportValue: !Sub ${VPCName}-SecurityGroupLambda
#        SubnetIds:
#          - Fn::ImportValue: !Sub ${VPCName}-PrivateSubnet1
#          - Fn::ImportValue: !Sub ${VPCName}-PrivateSubnet2
      Role: !GetAtt LambdaRole.Arn

  LambdaForAddClientSecretToParameterStoreFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue: !Sub ${VPCName}-Lambda-S3Bucket
        S3Key: cognito-init-lambda-0.0.1-SNAPSHOT-aws.jar
      Handler: org.debugroom.mynavi.sample.aws.microservice.lambda.app.handler.CloudFormationTriggerHandler::handleRequest
      FunctionName: mynavi-microservice-cfn-cognito-add-client-secret-function
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: addClientSecretToParameterStoreFunction
      MemorySize: 1024
      Runtime: java11
      Timeout: 120
      Role: !GetAtt LambdaRole.Arn

  LambdaForAddCognitoUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue: !Sub ${VPCName}-Lambda-S3Bucket
        S3Key: cognito-init-lambda-0.0.1-SNAPSHOT-aws.jar
      Handler: org.debugroom.mynavi.sample.aws.microservice.lambda.app.handler.CloudFormationTriggerHandler::handleRequest
      FunctionName: mynavi-microservice-cfn-cognito-add-cognito-user-function
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: addCognitoUserFunction
      MemorySize: 1024
      Runtime: java11
      Timeout: 120
      Role: !GetAtt LambdaRole.Arn

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  CloudFormationAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: mynavi-microservice-cfn-cognito-lambda-CloudFormationAccessPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "cloudformation:*"
            Resource: "*"
      Roles:
        - !Ref LambdaRole

  SSMAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: mynavi-microservice-cfn-cognito-lambda-SSMAccessPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "cloudwatch:PutMetricData"
              - "ds:CreateComputer"
              - "ds:DescribeDirectories"
              - "ec2:DescribeInstanceStatus"
              - "logs:*"
              - "ssm:*"
              - "ec2messages:*"
            Resource: "*"
          - Effect: Allow
            Action:
              - "iam:CreateServiceLinkedRole"
            Resource: "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*"
            Condition:
              StringLike:
                iam:AWSServiceName: "ssm.amazonaws.com"
          - Effect: Allow
            Action:
              - "iam:DeleteServiceLinkedRole"
              - "iam:GetServiceLinkedRoleDeletionStatus"
            Resource: "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*"
          - Effect: Allow
            Action:
              - "ssmmessages:CreateControlChannel"
              - "ssmmessages:CreateDataChannel"
              - "ssmmessages:OpenControlChannel"
              - "ssmmessages:OpenDataChannel"
            Resource: "*"
      Roles:
        - !Ref LambdaRole

  CognitoPowerUserPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: mynavi-microservice-cfn-cognito-lambda-CognitoccessPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "cognito-identity:*"
              - "cognito-idp:*"
              - "cognito-sync:*"
              -  "iam:ListRoles"
              -  "iam:ListOpenIdConnectProviders"
              -  "sns:ListPlatformApplications"
              -  "iam:GetRole"
              -  "iam:ListOpenIDConnectProviders"
              -  "iam:ListRoles"
              -  "iam:ListSAMLProviders"
              -  "iam:GetSAMLProvider"
              -  "kinesis:ListStreams"
              -  "lambda:GetPolicy"
              -  "lambda:GetPolicy2*"
              -  "lambda:ListFunctions"
              -  "lambda:ListFunctions2*"
              -  "sns:ListPlatformApplications"
              -  "ses:ListIdentities"
              -  "ses:GetIdentityVerificationAttributes"
              -  "mobiletargeting:GetApps"
              -  "acm:ListCertificates"
            Resource: "*"
          - Effect: Allow
            Action:
              - "iam:CreateServiceLinkedRole"
            Resource: "*"
            Condition:
              StringLike:
                iam:AWSServiceName:
                - "cognito-idp.amazonaws.com"
                - "email.cognito-idp.amazonaws.com"
          - Effect: Allow
            Action:
              - "iam:DeleteServiceLinkedRole"
              - "iam:GetServiceLinkedRoleDeletionStatus"
            Resource:
              - "arn:aws:iam::*:role/aws-service-role/cognito-idp.amazonaws.com/AWSServiceRoleForAmazonCognitoIdp*"
              - "arn:aws:iam::*:role/aws-service-role/email.cognito-idp.amazonaws.com/AWSServiceRoleForAmazonCognitoIdpEmail*"
      Roles:
        - !Ref LambdaRole

Outputs:
  LambdaForChangeCognitoUserStatusFunction:
    Description: Lambda function for changing cognito user status function.
    Value: !GetAtt LambdaForChangeCognitoUserStatusFunction.Arn
    Export:
      Name: !Sub ${VPCName}-LamdaForChangeCognitoUserStatusFunctionArn

  LambdaForAddClientSecretToParameterStoreFunction:
    Description: Lambda function for addtion of client sercret to parameter store function.
    Value: !GetAtt LambdaForAddClientSecretToParameterStoreFunction.Arn
    Export:
      Name: !Sub ${VPCName}-LamdaForAddClientSecretToParameterStoreFunctionArn

  LambdaForAddCognitoUserFunction:
    Description: Lambda function for addtion of cognito user function.
    Value: !GetAtt LambdaForAddCognitoUserFunction.Arn
    Export:
      Name: !Sub ${VPCName}-LamdaForAddCognitoUserFunctionArn
